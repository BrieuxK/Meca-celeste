import numpy as np
import matplotlib.pyplot as plt


k = 30 #pas de temps en jour => 1 mois
n_k = 2000 #nbr de pas de temps
mass1 = 1.898*1e27 #masse de Jupiter Kg
mass2 =1.989*1e30  #masse du Soleil  Kg

vectq = [5.7892571581640,-1.4530937208658,-0.1023477146383]   # XYZ en a.u.
vectp = [0.0051715942709*mass1,0.0246545396595*mass1,-0.0000734785932*mass1] 

position = vectq

G = 1.15488171e-4  #Constante de Newton avec a.u. et a.u./day

def dq(vectq, vectp):
    qdot = vectp/mass1
    return qdot
    
def dp(vectq, vectp, dist):
    pdot = (G*mass1*mass2)/dist(position)**2  #rajouter un - 
    return pdot

def dist(position):
    distance = np.sqrt(position[0]**2 + position[1]**2)
    return distance

#St√∏rmer-Verlet-------------------------------

qsv = np.zeros((3,n_k))
psv = np.zeros((3,n_k))
qsv[:,0] = vectq #CI
psv[:,0] = vectp #CI

for i in range(n_k-1):
    p_p = psv[:,i] - 0.5 * k * dq(qsv[:,i], psv[:,i])
    qsv[:,i+1] = qsv[:,i] + k * dp(qsv[:,i], p_p, dist)
    psv[:,i+1] = p_p - k * 0.5 *dq(qsv[:,i+1],p_p)
    

Impulsion_carre =  psv[0,:]**2 + psv[1,:]**2 + psv[2,:]**2
dist_pot = np.sqrt(qsv[0,:]**2 + qsv[1,:]**2 + qsv[2,:]**2)
Potentiel = (G*mass1*mass2)/dist_pot

Energie = Impulsion_carre/2*mass1 + Potentiel
plt.plot(dist_pot, np.sqrt(Impulsion_carre)/mass1)
